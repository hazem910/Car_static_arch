
Car_static_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000716  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001083  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000094f  00000000  00000000  0000197b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f0f  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d76  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf5  00000000  00000000  00007166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00007e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000324  00000000  00000000  00007f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
   2:	00 00       	nop
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	00 00       	nop
   c:	0f c1       	rjmp	.+542    	; 0x22c <__vector_3>
   e:	00 00       	nop
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	00 00       	nop
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	00 00       	nop
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	00 00       	nop
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c3       	rjmp	.+1612   	; 0x67a <__vector_11>
  2e:	00 00       	nop
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	00 00       	nop
  34:	31 c0       	rjmp	.+98     	; 0x98 <__bad_interrupt>
  36:	00 00       	nop
  38:	2f c0       	rjmp	.+94     	; 0x98 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
  4e:	00 00       	nop
  50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
  52:	00 00       	nop
  54:	5f 02       	muls	r21, r31
  56:	6a 02       	muls	r22, r26
  58:	75 02       	muls	r23, r21
  5a:	80 02       	muls	r24, r16
  5c:	8b 02       	muls	r24, r27
  5e:	96 02       	muls	r25, r22
  60:	a1 02       	muls	r26, r17

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e6 e1       	ldi	r30, 0x16	; 22
  76:	f7 e0       	ldi	r31, 0x07	; 7
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a0 36       	cpi	r26, 0x60	; 96
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a0 e6       	ldi	r26, 0x60	; 96
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a0 37       	cpi	r26, 0x70	; 112
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	17 d3       	rcall	.+1582   	; 0x6c4 <main>
  96:	3d c3       	rjmp	.+1658   	; 0x712 <_exit>

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <softwareDelayMs>:

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
  9a:	ab 01       	movw	r20, r22
  9c:	bc 01       	movw	r22, r24
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
  9e:	41 15       	cp	r20, r1
  a0:	51 05       	cpc	r21, r1
  a2:	61 05       	cpc	r22, r1
  a4:	71 05       	cpc	r23, r1
  a6:	71 f4       	brne	.+28     	; 0xc4 <softwareDelayMs+0x2a>
  a8:	08 95       	ret
  aa:	01 97       	sbiw	r24, 0x01	; 1
		for(uint16_t internalcounter=0;internalcounter<1000;internalcounter++){
  ac:	f1 f7       	brne	.-4      	; 0xaa <softwareDelayMs+0x10>

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	c9 01       	movw	r24, r18
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	84 17       	cp	r24, r20
  ba:	95 07       	cpc	r25, r21
  bc:	a6 07       	cpc	r26, r22
  be:	b7 07       	cpc	r27, r23
  c0:	18 f0       	brcs	.+6      	; 0xc8 <softwareDelayMs+0x2e>
  c2:	08 95       	ret
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	ee cf       	rjmp	.-36     	; 0xaa <softwareDelayMs+0x10>

000000ce <DIO_init>:
/*Output: No output*/
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
  ce:	fc 01       	movw	r30, r24
   ERROR_STATUS  EROR=E_OK;
 /*check if the pointer is not null*/  
   if(DIO_info!=NULL)
  d0:	89 2b       	or	r24, r25
  d2:	09 f4       	brne	.+2      	; 0xd6 <DIO_init+0x8>
  d4:	51 c0       	rjmp	.+162    	; 0x178 <DIO_init+0xaa>
   {
 /*choose any PORT*/ 
      switch(DIO_info->GPIO)
  d6:	80 81       	ld	r24, Z
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	c1 f0       	breq	.+48     	; 0x10c <DIO_init+0x3e>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_init+0x1a>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	39 f1       	breq	.+78     	; 0x130 <DIO_init+0x62>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	b9 f1       	breq	.+110    	; 0x154 <DIO_init+0x86>
  e6:	4a c0       	rjmp	.+148    	; 0x17c <DIO_init+0xae>
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
  e8:	82 81       	ldd	r24, Z+2	; 0x02
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	31 f4       	brne	.+12     	; 0xfa <DIO_init+0x2c>
               PORTA_DIR|=(DIO_info->pins);
  ee:	9a b3       	in	r25, 0x1a	; 26
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	89 2b       	or	r24, r25
  f4:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret
      switch(DIO_info->GPIO)
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
  fa:	81 11       	cpse	r24, r1
  fc:	41 c0       	rjmp	.+130    	; 0x180 <DIO_init+0xb2>
               PORTA_DIR&=~(DIO_info->pins);
  fe:	9a b3       	in	r25, 0x1a	; 26
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	80 95       	com	r24
 104:	89 23       	and	r24, r25
 106:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
 10c:	82 81       	ldd	r24, Z+2	; 0x02
 10e:	8f 3f       	cpi	r24, 0xFF	; 255
 110:	31 f4       	brne	.+12     	; 0x11e <DIO_init+0x50>
               PORTB_DIR|=(DIO_info->pins);
 112:	97 b3       	in	r25, 0x17	; 23
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	89 2b       	or	r24, r25
 118:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 11e:	81 11       	cpse	r24, r1
 120:	31 c0       	rjmp	.+98     	; 0x184 <DIO_init+0xb6>
               PORTB_DIR&=~(DIO_info->pins);
 122:	97 b3       	in	r25, 0x17	; 23
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	80 95       	com	r24
 128:	89 23       	and	r24, r25
 12a:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
 130:	82 81       	ldd	r24, Z+2	; 0x02
 132:	8f 3f       	cpi	r24, 0xFF	; 255
 134:	31 f4       	brne	.+12     	; 0x142 <DIO_init+0x74>
               PORTC_DIR|=(DIO_info->pins);
 136:	94 b3       	in	r25, 0x14	; 20
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	89 2b       	or	r24, r25
 13c:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 142:	81 11       	cpse	r24, r1
 144:	21 c0       	rjmp	.+66     	; 0x188 <DIO_init+0xba>
               PORTC_DIR&=~(DIO_info->pins);
 146:	94 b3       	in	r25, 0x14	; 20
 148:	81 81       	ldd	r24, Z+1	; 0x01
 14a:	80 95       	com	r24
 14c:	89 23       	and	r24, r25
 14e:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
 154:	82 81       	ldd	r24, Z+2	; 0x02
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	31 f4       	brne	.+12     	; 0x166 <DIO_init+0x98>
               PORTD_DIR|=(DIO_info->pins);
 15a:	91 b3       	in	r25, 0x11	; 17
 15c:	81 81       	ldd	r24, Z+1	; 0x01
 15e:	89 2b       	or	r24, r25
 160:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 166:	81 11       	cpse	r24, r1
 168:	11 c0       	rjmp	.+34     	; 0x18c <DIO_init+0xbe>
               PORTD_DIR&=~(DIO_info->pins);
 16a:	91 b3       	in	r25, 0x11	; 17
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	80 95       	com	r24
 170:	89 23       	and	r24, r25
 172:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
         
      }   
   }
   else
   {
      EROR=E_NOK;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         default:
               EROR=E_NOK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 18c:	81 e0       	ldi	r24, 0x01	; 1
      EROR=E_NOK;
   }
   
   
   return EROR;
}
 18e:	08 95       	ret

00000190 <DIO_Write>:
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
  /*choose any PORT*/  
   switch (GPIO)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	a9 f0       	breq	.+42     	; 0x1be <DIO_Write+0x2e>
 194:	28 f0       	brcs	.+10     	; 0x1a0 <DIO_Write+0x10>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	09 f1       	breq	.+66     	; 0x1dc <DIO_Write+0x4c>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	71 f1       	breq	.+92     	; 0x1fa <DIO_Write+0x6a>
 19e:	3c c0       	rjmp	.+120    	; 0x218 <DIO_Write+0x88>
   {
      case GPIOA:
            if(value==HIGH)
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	29 f4       	brne	.+10     	; 0x1ae <DIO_Write+0x1e>
            PORTA_DATA|=pins;
 1a4:	8b b3       	in	r24, 0x1b	; 27
 1a6:	68 2b       	or	r22, r24
 1a8:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
   switch (GPIO)
   {
      case GPIOA:
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
 1ae:	41 11       	cpse	r20, r1
 1b0:	35 c0       	rjmp	.+106    	; 0x21c <DIO_Write+0x8c>
            PORTA_DATA&=~(pins);
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	60 95       	com	r22
 1b6:	68 23       	and	r22, r24
 1b8:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
 1be:	4f 3f       	cpi	r20, 0xFF	; 255
 1c0:	29 f4       	brne	.+10     	; 0x1cc <DIO_Write+0x3c>
            PORTB_DATA|=pins;
 1c2:	88 b3       	in	r24, 0x18	; 24
 1c4:	68 2b       	or	r22, r24
 1c6:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
 1cc:	41 11       	cpse	r20, r1
 1ce:	28 c0       	rjmp	.+80     	; 0x220 <DIO_Write+0x90>
            PORTB_DATA&=~(pins);
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	60 95       	com	r22
 1d4:	68 23       	and	r22, r24
 1d6:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
 1dc:	4f 3f       	cpi	r20, 0xFF	; 255
 1de:	29 f4       	brne	.+10     	; 0x1ea <DIO_Write+0x5a>
            PORTC_DATA|=pins;
 1e0:	85 b3       	in	r24, 0x15	; 21
 1e2:	68 2b       	or	r22, r24
 1e4:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
 1ea:	41 11       	cpse	r20, r1
 1ec:	1b c0       	rjmp	.+54     	; 0x224 <DIO_Write+0x94>
            PORTC_DATA&=~(pins);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	60 95       	com	r22
 1f2:	68 23       	and	r22, r24
 1f4:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
 1fa:	4f 3f       	cpi	r20, 0xFF	; 255
 1fc:	29 f4       	brne	.+10     	; 0x208 <DIO_Write+0x78>
            PORTD_DATA|=pins;
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	68 2b       	or	r22, r24
 202:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
 208:	41 11       	cpse	r20, r1
 20a:	0e c0       	rjmp	.+28     	; 0x228 <DIO_Write+0x98>
            PORTD_DATA&=~(pins);
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	60 95       	com	r22
 210:	68 23       	and	r22, r24
 212:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret
            else
            EROR=E_NOK;
            break;
     /*if the channel is wrong */          
      default:
            EROR=E_NOK;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	08 95       	ret
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	08 95       	ret
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	08 95       	ret
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
            PORTD_DATA&=~(pins);
            else
            EROR=E_NOK;
 228:	81 e0       	ldi	r24, 0x01	; 1
            break;
   }


   return EROR;
}
 22a:	08 95       	ret

0000022c <__vector_3>:
 
 
 
 
 ISR(INT2_vect)
{
 22c:	1f 92       	push	r1
 22e:	0f 92       	push	r0
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	0f 92       	push	r0
 234:	11 24       	eor	r1, r1
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31

	 if(gu8_Flag==0)
 24e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gu8_Flag>
 252:	81 11       	cpse	r24, r1
 254:	0d c0       	rjmp	.+26     	; 0x270 <__vector_3+0x44>
	  { 
		 Timer_Start(TIMER_0,INIT_TINMER);	
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	2b d0       	rcall	.+86     	; 0x2b2 <Timer_Start>
       TOGGEL_BIT(MCUCSR,ISC2);
 25c:	94 b7       	in	r25, 0x34	; 52
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	89 27       	eor	r24, r25
 262:	84 bf       	out	0x34, r24	; 52
		 gu8_Flag++;	 
 264:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <gu8_Flag>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_Flag>
 26e:	10 c0       	rjmp	.+32     	; 0x290 <__vector_3+0x64>
	 }
	 else
	 {
		 Timer_Stop(TIMER_0);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	86 d1       	rcall	.+780    	; 0x580 <Timer_Stop>
       Timer_GetValue(TIMER_0,&gu8_risetofall);
 274:	60 e6       	ldi	r22, 0x60	; 96
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	bd d1       	rcall	.+890    	; 0x5f6 <Timer_GetValue>
		 Timer_SetValue(TIMER_0,INIT_TINMER);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	e2 d1       	rcall	.+964    	; 0x648 <Timer_SetValue>
       gu8_Flag=INIT_TINMER;
 284:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <gu8_Flag>
       TOGGEL_BIT(MCUCSR,ISC2);	 
 288:	94 b7       	in	r25, 0x34	; 52
 28a:	80 e4       	ldi	r24, 0x40	; 64
 28c:	89 27       	eor	r24, r25
 28e:	84 bf       	out	0x34, r24	; 52
	 }
	 
	 
	 
 290:	ff 91       	pop	r31
 292:	ef 91       	pop	r30
 294:	bf 91       	pop	r27
 296:	af 91       	pop	r26
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	7f 91       	pop	r23
 29e:	6f 91       	pop	r22
 2a0:	5f 91       	pop	r21
 2a2:	4f 91       	pop	r20
 2a4:	3f 91       	pop	r19
 2a6:	2f 91       	pop	r18
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <Timer_Start>:
	else
	{
		ERROR=E_NOK;
	}
	return ERROR;
}
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <Timer_Start+0x6>
 2b6:	77 c0       	rjmp	.+238    	; 0x3a6 <Timer_Start+0xf4>
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <Timer_Start+0x10>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <Timer_Start+0xe>
 2be:	e2 c0       	rjmp	.+452    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 2c0:	4b c1       	rjmp	.+662    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 2c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gsau8_initState>
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <Timer_Start+0x1a>
 2ca:	48 c1       	rjmp	.+656    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 2cc:	62 bf       	out	0x32, r22	; 50
 2ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gsau8_mode>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <Timer_Start+0x26>
 2d6:	51 c0       	rjmp	.+162    	; 0x37a <Timer_Start+0xc8>
 2d8:	20 f0       	brcs	.+8      	; 0x2e2 <Timer_Start+0x30>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <Timer_Start+0x2e>
 2de:	58 c0       	rjmp	.+176    	; 0x390 <Timer_Start+0xde>
 2e0:	3f c1       	rjmp	.+638    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 2e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <gsau8_preScaler>
 2e6:	84 30       	cpi	r24, 0x04	; 4
 2e8:	09 f1       	breq	.+66     	; 0x32c <Timer_Start+0x7a>
 2ea:	28 f4       	brcc	.+10     	; 0x2f6 <Timer_Start+0x44>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	41 f0       	breq	.+16     	; 0x300 <Timer_Start+0x4e>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	89 f0       	breq	.+34     	; 0x316 <Timer_Start+0x64>
 2f4:	37 c1       	rjmp	.+622    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 2f6:	86 30       	cpi	r24, 0x06	; 6
 2f8:	21 f1       	breq	.+72     	; 0x342 <Timer_Start+0x90>
 2fa:	87 30       	cpi	r24, 0x07	; 7
 2fc:	69 f1       	breq	.+90     	; 0x358 <Timer_Start+0xa6>
 2fe:	32 c1       	rjmp	.+612    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 300:	83 b7       	in	r24, 0x33	; 51
 302:	8b 7f       	andi	r24, 0xFB	; 251
 304:	83 bf       	out	0x33, r24	; 51
 306:	83 b7       	in	r24, 0x33	; 51
 308:	8d 7f       	andi	r24, 0xFD	; 253
 30a:	83 bf       	out	0x33, r24	; 51
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	83 bf       	out	0x33, r24	; 51
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
 316:	83 b7       	in	r24, 0x33	; 51
 318:	8b 7f       	andi	r24, 0xFB	; 251
 31a:	83 bf       	out	0x33, r24	; 51
 31c:	83 b7       	in	r24, 0x33	; 51
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	83 bf       	out	0x33, r24	; 51
 322:	83 b7       	in	r24, 0x33	; 51
 324:	82 60       	ori	r24, 0x02	; 2
 326:	83 bf       	out	0x33, r24	; 51
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
 32c:	83 b7       	in	r24, 0x33	; 51
 32e:	8b 7f       	andi	r24, 0xFB	; 251
 330:	83 bf       	out	0x33, r24	; 51
 332:	83 b7       	in	r24, 0x33	; 51
 334:	82 60       	ori	r24, 0x02	; 2
 336:	83 bf       	out	0x33, r24	; 51
 338:	83 b7       	in	r24, 0x33	; 51
 33a:	81 60       	ori	r24, 0x01	; 1
 33c:	83 bf       	out	0x33, r24	; 51
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	83 b7       	in	r24, 0x33	; 51
 344:	8e 7f       	andi	r24, 0xFE	; 254
 346:	83 bf       	out	0x33, r24	; 51
 348:	83 b7       	in	r24, 0x33	; 51
 34a:	8d 7f       	andi	r24, 0xFD	; 253
 34c:	83 bf       	out	0x33, r24	; 51
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	84 60       	ori	r24, 0x04	; 4
 352:	83 bf       	out	0x33, r24	; 51
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
 358:	83 b7       	in	r24, 0x33	; 51
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	83 bf       	out	0x33, r24	; 51
 35e:	83 b7       	in	r24, 0x33	; 51
 360:	8d 7f       	andi	r24, 0xFD	; 253
 362:	83 bf       	out	0x33, r24	; 51
 364:	83 b7       	in	r24, 0x33	; 51
 366:	84 60       	ori	r24, 0x04	; 4
 368:	83 bf       	out	0x33, r24	; 51
 36a:	83 b7       	in	r24, 0x33	; 51
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	83 bf       	out	0x33, r24	; 51
 370:	83 b7       	in	r24, 0x33	; 51
 372:	82 60       	ori	r24, 0x02	; 2
 374:	83 bf       	out	0x33, r24	; 51
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
 37a:	83 b7       	in	r24, 0x33	; 51
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	83 bf       	out	0x33, r24	; 51
 380:	83 b7       	in	r24, 0x33	; 51
 382:	82 60       	ori	r24, 0x02	; 2
 384:	83 bf       	out	0x33, r24	; 51
 386:	83 b7       	in	r24, 0x33	; 51
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	83 bf       	out	0x33, r24	; 51
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
 390:	83 b7       	in	r24, 0x33	; 51
 392:	84 60       	ori	r24, 0x04	; 4
 394:	83 bf       	out	0x33, r24	; 51
 396:	83 b7       	in	r24, 0x33	; 51
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	83 bf       	out	0x33, r24	; 51
 39c:	83 b7       	in	r24, 0x33	; 51
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	83 bf       	out	0x33, r24	; 51
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
 3a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gsau8_initState+0x1>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <Timer_Start+0xfe>
 3ae:	dc c0       	rjmp	.+440    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 3b0:	60 95       	com	r22
 3b2:	70 95       	com	r23
 3b4:	7d bd       	out	0x2d, r23	; 45
 3b6:	6c bd       	out	0x2c, r22	; 44
 3b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <gsau8_mode+0x1>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <Timer_Start+0x110>
 3c0:	4b c0       	rjmp	.+150    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <Timer_Start+0x11a>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	09 f4       	brne	.+2      	; 0x3ca <Timer_Start+0x118>
 3c8:	52 c0       	rjmp	.+164    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 3ca:	d0 c0       	rjmp	.+416    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 3cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gsau8_preScaler+0x1>
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	09 f1       	breq	.+66     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3d4:	28 f4       	brcc	.+10     	; 0x3e0 <Timer_Start+0x12e>
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	41 f0       	breq	.+16     	; 0x3ea <Timer_Start+0x138>
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	89 f0       	breq	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
 3de:	c8 c0       	rjmp	.+400    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 3e0:	86 30       	cpi	r24, 0x06	; 6
 3e2:	21 f1       	breq	.+72     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3e4:	87 30       	cpi	r24, 0x07	; 7
 3e6:	69 f1       	breq	.+90     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 3e8:	c3 c0       	rjmp	.+390    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 3ea:	8e b5       	in	r24, 0x2e	; 46
 3ec:	8b 7f       	andi	r24, 0xFB	; 251
 3ee:	8e bd       	out	0x2e, r24	; 46
 3f0:	8e b5       	in	r24, 0x2e	; 46
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	8e bd       	out	0x2e, r24	; 46
 3f6:	8e b5       	in	r24, 0x2e	; 46
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	8e bd       	out	0x2e, r24	; 46
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	08 95       	ret
 400:	8e b5       	in	r24, 0x2e	; 46
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	8e bd       	out	0x2e, r24	; 46
 406:	8e b5       	in	r24, 0x2e	; 46
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	8e bd       	out	0x2e, r24	; 46
 40c:	8e b5       	in	r24, 0x2e	; 46
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	8e bd       	out	0x2e, r24	; 46
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	08 95       	ret
 416:	8e b5       	in	r24, 0x2e	; 46
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	8e bd       	out	0x2e, r24	; 46
 41c:	8e b5       	in	r24, 0x2e	; 46
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	8e bd       	out	0x2e, r24	; 46
 422:	8e b5       	in	r24, 0x2e	; 46
 424:	82 60       	ori	r24, 0x02	; 2
 426:	8e bd       	out	0x2e, r24	; 46
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	8e b5       	in	r24, 0x2e	; 46
 42e:	8d 7f       	andi	r24, 0xFD	; 253
 430:	8e bd       	out	0x2e, r24	; 46
 432:	8e b5       	in	r24, 0x2e	; 46
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	8e bd       	out	0x2e, r24	; 46
 438:	8e b5       	in	r24, 0x2e	; 46
 43a:	84 60       	ori	r24, 0x04	; 4
 43c:	8e bd       	out	0x2e, r24	; 46
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	08 95       	ret
 442:	8e b5       	in	r24, 0x2e	; 46
 444:	8d 7f       	andi	r24, 0xFD	; 253
 446:	8e bd       	out	0x2e, r24	; 46
 448:	8e b5       	in	r24, 0x2e	; 46
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	8e bd       	out	0x2e, r24	; 46
 44e:	8e b5       	in	r24, 0x2e	; 46
 450:	84 60       	ori	r24, 0x04	; 4
 452:	8e bd       	out	0x2e, r24	; 46
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
 458:	8e b5       	in	r24, 0x2e	; 46
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	8e bd       	out	0x2e, r24	; 46
 45e:	8e b5       	in	r24, 0x2e	; 46
 460:	81 60       	ori	r24, 0x01	; 1
 462:	8e bd       	out	0x2e, r24	; 46
 464:	8e b5       	in	r24, 0x2e	; 46
 466:	84 60       	ori	r24, 0x04	; 4
 468:	8e bd       	out	0x2e, r24	; 46
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
 46e:	8e b5       	in	r24, 0x2e	; 46
 470:	82 60       	ori	r24, 0x02	; 2
 472:	8e bd       	out	0x2e, r24	; 46
 474:	8e b5       	in	r24, 0x2e	; 46
 476:	84 60       	ori	r24, 0x04	; 4
 478:	8e bd       	out	0x2e, r24	; 46
 47a:	8e b5       	in	r24, 0x2e	; 46
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	8e bd       	out	0x2e, r24	; 46
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret
 484:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gsau8_initState+0x2>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	73 c0       	rjmp	.+230    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 48e:	60 95       	com	r22
 490:	64 bd       	out	0x24, r22	; 36
 492:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gsau8_mode+0x2>
 496:	88 23       	and	r24, r24
 498:	29 f0       	breq	.+10     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	08 f4       	brcc	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	6c c0       	rjmp	.+216    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gsau8_preScaler+0x2>
 4a8:	8e 2f       	mov	r24, r30
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	e7 30       	cpi	r30, 0x07	; 7
 4b2:	f1 05       	cpc	r31, r1
 4b4:	08 f0       	brcs	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	62 c0       	rjmp	.+196    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 4b8:	e6 5d       	subi	r30, 0xD6	; 214
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	24 c1       	rjmp	.+584    	; 0x706 <__tablejump2__>
 4be:	85 b5       	in	r24, 0x25	; 37
 4c0:	84 60       	ori	r24, 0x04	; 4
 4c2:	85 bd       	out	0x25, r24	; 37
 4c4:	85 b5       	in	r24, 0x25	; 37
 4c6:	82 60       	ori	r24, 0x02	; 2
 4c8:	85 bd       	out	0x25, r24	; 37
 4ca:	85 b5       	in	r24, 0x25	; 37
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	85 bd       	out	0x25, r24	; 37
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
 4d4:	85 b5       	in	r24, 0x25	; 37
 4d6:	8e 7f       	andi	r24, 0xFE	; 254
 4d8:	85 bd       	out	0x25, r24	; 37
 4da:	85 b5       	in	r24, 0x25	; 37
 4dc:	8b 7f       	andi	r24, 0xFB	; 251
 4de:	85 bd       	out	0x25, r24	; 37
 4e0:	85 b5       	in	r24, 0x25	; 37
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	85 bd       	out	0x25, r24	; 37
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	85 b5       	in	r24, 0x25	; 37
 4ec:	8b 7f       	andi	r24, 0xFB	; 251
 4ee:	85 bd       	out	0x25, r24	; 37
 4f0:	85 b5       	in	r24, 0x25	; 37
 4f2:	81 60       	ori	r24, 0x01	; 1
 4f4:	85 bd       	out	0x25, r24	; 37
 4f6:	85 b5       	in	r24, 0x25	; 37
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	85 bd       	out	0x25, r24	; 37
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	08 95       	ret
 500:	85 b5       	in	r24, 0x25	; 37
 502:	84 60       	ori	r24, 0x04	; 4
 504:	85 bd       	out	0x25, r24	; 37
 506:	85 b5       	in	r24, 0x25	; 37
 508:	8e 7f       	andi	r24, 0xFE	; 254
 50a:	85 bd       	out	0x25, r24	; 37
 50c:	85 b5       	in	r24, 0x25	; 37
 50e:	8d 7f       	andi	r24, 0xFD	; 253
 510:	85 bd       	out	0x25, r24	; 37
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
 516:	85 b5       	in	r24, 0x25	; 37
 518:	84 60       	ori	r24, 0x04	; 4
 51a:	85 bd       	out	0x25, r24	; 37
 51c:	85 b5       	in	r24, 0x25	; 37
 51e:	81 60       	ori	r24, 0x01	; 1
 520:	85 bd       	out	0x25, r24	; 37
 522:	85 b5       	in	r24, 0x25	; 37
 524:	8d 7f       	andi	r24, 0xFD	; 253
 526:	85 bd       	out	0x25, r24	; 37
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
 52c:	85 b5       	in	r24, 0x25	; 37
 52e:	84 60       	ori	r24, 0x04	; 4
 530:	85 bd       	out	0x25, r24	; 37
 532:	85 b5       	in	r24, 0x25	; 37
 534:	82 60       	ori	r24, 0x02	; 2
 536:	85 bd       	out	0x25, r24	; 37
 538:	85 b5       	in	r24, 0x25	; 37
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	85 bd       	out	0x25, r24	; 37
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
 542:	85 b5       	in	r24, 0x25	; 37
 544:	84 60       	ori	r24, 0x04	; 4
 546:	85 bd       	out	0x25, r24	; 37
 548:	85 b5       	in	r24, 0x25	; 37
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	85 bd       	out	0x25, r24	; 37
 54e:	85 b5       	in	r24, 0x25	; 37
 550:	81 60       	ori	r24, 0x01	; 1
 552:	85 bd       	out	0x25, r24	; 37
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	08 95       	ret
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	08 95       	ret
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret

00000580 <Timer_Stop>:
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	99 f0       	breq	.+38     	; 0x5aa <Timer_Stop+0x2a>
 584:	18 f0       	brcs	.+6      	; 0x58c <Timer_Stop+0xc>
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	f9 f0       	breq	.+62     	; 0x5c8 <Timer_Stop+0x48>
 58a:	2d c0       	rjmp	.+90     	; 0x5e6 <Timer_Stop+0x66>
 58c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <gsau8_initState>
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	59 f5       	brne	.+86     	; 0x5ea <Timer_Stop+0x6a>
 594:	83 b7       	in	r24, 0x33	; 51
 596:	84 60       	ori	r24, 0x04	; 4
 598:	83 bf       	out	0x33, r24	; 51
 59a:	83 b7       	in	r24, 0x33	; 51
 59c:	82 60       	ori	r24, 0x02	; 2
 59e:	83 bf       	out	0x33, r24	; 51
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	83 bf       	out	0x33, r24	; 51
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	08 95       	ret
 5aa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gsau8_initState+0x1>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	f1 f4       	brne	.+60     	; 0x5ee <Timer_Stop+0x6e>
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	8b 7f       	andi	r24, 0xFB	; 251
 5b6:	83 bf       	out	0x33, r24	; 51
 5b8:	83 b7       	in	r24, 0x33	; 51
 5ba:	8d 7f       	andi	r24, 0xFD	; 253
 5bc:	83 bf       	out	0x33, r24	; 51
 5be:	83 b7       	in	r24, 0x33	; 51
 5c0:	8e 7f       	andi	r24, 0xFE	; 254
 5c2:	83 bf       	out	0x33, r24	; 51
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
 5c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <gsau8_initState+0x2>
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	89 f4       	brne	.+34     	; 0x5f2 <Timer_Stop+0x72>
 5d0:	85 b5       	in	r24, 0x25	; 37
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
 5d4:	85 bd       	out	0x25, r24	; 37
 5d6:	85 b5       	in	r24, 0x25	; 37
 5d8:	8b 7f       	andi	r24, 0xFB	; 251
 5da:	85 bd       	out	0x25, r24	; 37
 5dc:	85 b5       	in	r24, 0x25	; 37
 5de:	8d 7f       	andi	r24, 0xFD	; 253
 5e0:	85 bd       	out	0x25, r24	; 37
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	08 95       	ret
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	08 95       	ret
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret

000005f6 <Timer_GetValue>:
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,volatile uint16_t* Data)
{ERROR_STATUS ERROR=E_OK;
	if(gsau8_initState[Timer_CH_NO] == INITIALIZED)
 5f6:	e8 2f       	mov	r30, r24
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	ed 59       	subi	r30, 0x9D	; 157
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	90 81       	ld	r25, Z
 600:	91 30       	cpi	r25, 0x01	; 1
 602:	f1 f4       	brne	.+60     	; 0x640 <Timer_GetValue+0x4a>
	{
		*Data = 0;
 604:	fb 01       	movw	r30, r22
 606:	11 82       	std	Z+1, r1	; 0x01
 608:	10 82       	st	Z, r1
		switch (Timer_CH_NO)
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	59 f0       	breq	.+22     	; 0x624 <Timer_GetValue+0x2e>
 60e:	18 f0       	brcs	.+6      	; 0x616 <Timer_GetValue+0x20>
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	79 f0       	breq	.+30     	; 0x632 <Timer_GetValue+0x3c>
 614:	17 c0       	rjmp	.+46     	; 0x644 <Timer_GetValue+0x4e>
		{
		case (TIMER_0):
			*Data = TCNT0;
 616:	82 b7       	in	r24, 0x32	; 50
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	fb 01       	movw	r30, r22
 61c:	91 83       	std	Z+1, r25	; 0x01
 61e:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,volatile uint16_t* Data)
{ERROR_STATUS ERROR=E_OK;
 620:	80 e0       	ldi	r24, 0x00	; 0
		*Data = 0;
		switch (Timer_CH_NO)
		{
		case (TIMER_0):
			*Data = TCNT0;
			break;
 622:	08 95       	ret
		case (TIMER_1):
			*Data = TCNT1;
 624:	8c b5       	in	r24, 0x2c	; 44
 626:	9d b5       	in	r25, 0x2d	; 45
 628:	fb 01       	movw	r30, r22
 62a:	91 83       	std	Z+1, r25	; 0x01
 62c:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,volatile uint16_t* Data)
{ERROR_STATUS ERROR=E_OK;
 62e:	80 e0       	ldi	r24, 0x00	; 0
		case (TIMER_0):
			*Data = TCNT0;
			break;
		case (TIMER_1):
			*Data = TCNT1;
			break;
 630:	08 95       	ret
		case (TIMER_2):
			*Data = TCNT2;
 632:	84 b5       	in	r24, 0x24	; 36
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	fb 01       	movw	r30, r22
 638:	91 83       	std	Z+1, r25	; 0x01
 63a:	80 83       	st	Z, r24
 * Return: The error status of the function.
 * Description: This function is used to return the value of the timer.
 *
 */
ERROR_STATUS Timer_GetValue(uint8_t Timer_CH_NO,volatile uint16_t* Data)
{ERROR_STATUS ERROR=E_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
		case (TIMER_1):
			*Data = TCNT1;
			break;
		case (TIMER_2):
			*Data = TCNT2;
			break;
 63e:	08 95       	ret
			break;
		}
	}
	else
	{
		ERROR=E_NOK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	08 95       	ret
			break;
		case (TIMER_2):
			*Data = TCNT2;
			break;
		default:
			ERROR=E_NOK;
 644:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		ERROR=E_NOK;
	}
	return ERROR;
}
 646:	08 95       	ret

00000648 <Timer_SetValue>:


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
	switch(Timer_CH)
 648:	81 30       	cpi	r24, 0x01	; 1
 64a:	49 f0       	breq	.+18     	; 0x65e <Timer_SetValue+0x16>
 64c:	18 f0       	brcs	.+6      	; 0x654 <Timer_SetValue+0xc>
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	69 f0       	breq	.+26     	; 0x66c <Timer_SetValue+0x24>
 652:	11 c0       	rjmp	.+34     	; 0x676 <Timer_SetValue+0x2e>
	{
		case TIMER_0:
		          TCNT0=*Data;
 654:	fb 01       	movw	r30, r22
 656:	80 81       	ld	r24, Z
 658:	82 bf       	out	0x32, r24	; 50
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 65a:	80 e0       	ldi	r24, 0x00	; 0
	switch(Timer_CH)
	{
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
 65c:	08 95       	ret
		case TIMER_1:
		           TCNT1=*Data;
 65e:	fb 01       	movw	r30, r22
 660:	80 81       	ld	r24, Z
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	9d bd       	out	0x2d, r25	; 45
 666:	8c bd       	out	0x2c, r24	; 44
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
		case TIMER_1:
		           TCNT1=*Data;
		           break;
 66a:	08 95       	ret
		case TIMER_2:
		           TCNT2=*Data;
 66c:	fb 01       	movw	r30, r22
 66e:	80 81       	ld	r24, Z
 670:	84 bd       	out	0x24, r24	; 36
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 672:	80 e0       	ldi	r24, 0x00	; 0
		case TIMER_1:
		           TCNT1=*Data;
		           break;
		case TIMER_2:
		           TCNT2=*Data;
		           break;
 674:	08 95       	ret
		default:
		       ERROR=E_NOK;
 676:	81 e0       	ldi	r24, 0x01	; 1
			   break;
	}
	
	return ERROR;
}
 678:	08 95       	ret

0000067a <__vector_11>:
ISR(TIMER0_OVF_vect)
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	af 93       	push	r26
 68a:	bf 93       	push	r27
	gu_timer_count1++;
 68c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <gu_timer_count1>
 690:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <gu_timer_count1+0x1>
 694:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <gu_timer_count1+0x2>
 698:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <gu_timer_count1+0x3>
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	a1 1d       	adc	r26, r1
 6a0:	b1 1d       	adc	r27, r1
 6a2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu_timer_count1>
 6a6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <gu_timer_count1+0x1>
 6aa:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <gu_timer_count1+0x2>
 6ae:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <gu_timer_count1+0x3>
}
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0
 6c0:	1f 90       	pop	r1
 6c2:	18 95       	reti

000006c4 <main>:
 *  Author: Hazem
 */ 
#include "Macl/DIO.h"
#include "Common/softwareDelay.h"
int main(void)
{ 
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <main+0x6>
 6ca:	1f 92       	push	r1
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
   /*CAR_INIT_*/ 
DIO_Cfg_s ST_DIOINSTANCE={GPIOA,BIT1,OUTPUT};
 6d0:	19 82       	std	Y+1, r1	; 0x01
 6d2:	82 e0       	ldi	r24, 0x02	; 2
 6d4:	8a 83       	std	Y+2, r24	; 0x02
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init(&ST_DIOINSTANCE);
 6da:	ce 01       	movw	r24, r28
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	f7 dc       	rcall	.-1554   	; 0xce <DIO_init>
/*SUPER LOOP OF THE APPLICATION */
	while(1)
  {     
     /*CAR_LOGIC_USING_ULTRASONIC*/
	DIO_Write(GPIOA,BIT1,HIGH);
 6e0:	4f ef       	ldi	r20, 0xFF	; 255
 6e2:	62 e0       	ldi	r22, 0x02	; 2
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	54 dd       	rcall	.-1368   	; 0x190 <DIO_Write>
	softwareDelayMs(1000);
 6e8:	68 ee       	ldi	r22, 0xE8	; 232
 6ea:	73 e0       	ldi	r23, 0x03	; 3
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	d4 dc       	rcall	.-1624   	; 0x9a <softwareDelayMs>
	DIO_Write(GPIOA,BIT1,LOW);
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	62 e0       	ldi	r22, 0x02	; 2
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	4b dd       	rcall	.-1386   	; 0x190 <DIO_Write>
	softwareDelayMs(1000);
 6fa:	68 ee       	ldi	r22, 0xE8	; 232
 6fc:	73 e0       	ldi	r23, 0x03	; 3
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	cb dc       	rcall	.-1642   	; 0x9a <softwareDelayMs>
 704:	ed cf       	rjmp	.-38     	; 0x6e0 <main+0x1c>

00000706 <__tablejump2__>:
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	05 90       	lpm	r0, Z+
 70c:	f4 91       	lpm	r31, Z
 70e:	e0 2d       	mov	r30, r0
 710:	09 94       	ijmp

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
